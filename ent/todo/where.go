// Code generated by ent, DO NOT EDIT.

package todo

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dev-hyunsang/clone-todo-mate/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// TodoUUID applies equality check predicate on the "todo_uuid" field. It's identical to TodoUUIDEQ.
func TodoUUID(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoUUID), v))
	})
}

// UserUUID applies equality check predicate on the "user_uuid" field. It's identical to UserUUIDEQ.
func UserUUID(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUUID), v))
	})
}

// TodoContext applies equality check predicate on the "todo_context" field. It's identical to TodoContextEQ.
func TodoContext(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoContext), v))
	})
}

// Completion applies equality check predicate on the "completion" field. It's identical to CompletionEQ.
func Completion(v bool) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompletion), v))
	})
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompletedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// TodoUUIDEQ applies the EQ predicate on the "todo_uuid" field.
func TodoUUIDEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDNEQ applies the NEQ predicate on the "todo_uuid" field.
func TodoUUIDNEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDIn applies the In predicate on the "todo_uuid" field.
func TodoUUIDIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTodoUUID), v...))
	})
}

// TodoUUIDNotIn applies the NotIn predicate on the "todo_uuid" field.
func TodoUUIDNotIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTodoUUID), v...))
	})
}

// TodoUUIDGT applies the GT predicate on the "todo_uuid" field.
func TodoUUIDGT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDGTE applies the GTE predicate on the "todo_uuid" field.
func TodoUUIDGTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDLT applies the LT predicate on the "todo_uuid" field.
func TodoUUIDLT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTodoUUID), v))
	})
}

// TodoUUIDLTE applies the LTE predicate on the "todo_uuid" field.
func TodoUUIDLTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTodoUUID), v))
	})
}

// UserUUIDEQ applies the EQ predicate on the "user_uuid" field.
func UserUUIDEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserUUID), v))
	})
}

// UserUUIDNEQ applies the NEQ predicate on the "user_uuid" field.
func UserUUIDNEQ(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserUUID), v))
	})
}

// UserUUIDIn applies the In predicate on the "user_uuid" field.
func UserUUIDIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserUUID), v...))
	})
}

// UserUUIDNotIn applies the NotIn predicate on the "user_uuid" field.
func UserUUIDNotIn(vs ...uuid.UUID) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserUUID), v...))
	})
}

// UserUUIDGT applies the GT predicate on the "user_uuid" field.
func UserUUIDGT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserUUID), v))
	})
}

// UserUUIDGTE applies the GTE predicate on the "user_uuid" field.
func UserUUIDGTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserUUID), v))
	})
}

// UserUUIDLT applies the LT predicate on the "user_uuid" field.
func UserUUIDLT(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserUUID), v))
	})
}

// UserUUIDLTE applies the LTE predicate on the "user_uuid" field.
func UserUUIDLTE(v uuid.UUID) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserUUID), v))
	})
}

// TodoContextEQ applies the EQ predicate on the "todo_context" field.
func TodoContextEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTodoContext), v))
	})
}

// TodoContextNEQ applies the NEQ predicate on the "todo_context" field.
func TodoContextNEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTodoContext), v))
	})
}

// TodoContextIn applies the In predicate on the "todo_context" field.
func TodoContextIn(vs ...string) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTodoContext), v...))
	})
}

// TodoContextNotIn applies the NotIn predicate on the "todo_context" field.
func TodoContextNotIn(vs ...string) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTodoContext), v...))
	})
}

// TodoContextGT applies the GT predicate on the "todo_context" field.
func TodoContextGT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTodoContext), v))
	})
}

// TodoContextGTE applies the GTE predicate on the "todo_context" field.
func TodoContextGTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTodoContext), v))
	})
}

// TodoContextLT applies the LT predicate on the "todo_context" field.
func TodoContextLT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTodoContext), v))
	})
}

// TodoContextLTE applies the LTE predicate on the "todo_context" field.
func TodoContextLTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTodoContext), v))
	})
}

// TodoContextContains applies the Contains predicate on the "todo_context" field.
func TodoContextContains(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTodoContext), v))
	})
}

// TodoContextHasPrefix applies the HasPrefix predicate on the "todo_context" field.
func TodoContextHasPrefix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTodoContext), v))
	})
}

// TodoContextHasSuffix applies the HasSuffix predicate on the "todo_context" field.
func TodoContextHasSuffix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTodoContext), v))
	})
}

// TodoContextEqualFold applies the EqualFold predicate on the "todo_context" field.
func TodoContextEqualFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTodoContext), v))
	})
}

// TodoContextContainsFold applies the ContainsFold predicate on the "todo_context" field.
func TodoContextContainsFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTodoContext), v))
	})
}

// CompletionEQ applies the EQ predicate on the "completion" field.
func CompletionEQ(v bool) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompletion), v))
	})
}

// CompletionNEQ applies the NEQ predicate on the "completion" field.
func CompletionNEQ(v bool) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompletion), v))
	})
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompletedAt), v))
	})
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompletedAt), v))
	})
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCompletedAt), v...))
	})
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCompletedAt), v...))
	})
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompletedAt), v))
	})
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompletedAt), v))
	})
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompletedAt), v))
	})
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompletedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...string) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...string) predicate.ToDo {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtContains applies the Contains predicate on the "created_at" field.
func CreatedAtContains(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtHasPrefix applies the HasPrefix predicate on the "created_at" field.
func CreatedAtHasPrefix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtHasSuffix applies the HasSuffix predicate on the "created_at" field.
func CreatedAtHasSuffix(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtEqualFold applies the EqualFold predicate on the "created_at" field.
func CreatedAtEqualFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtContainsFold applies the ContainsFold predicate on the "created_at" field.
func CreatedAtContainsFold(v string) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreatedAt), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ToDo) predicate.ToDo {
	return predicate.ToDo(func(s *sql.Selector) {
		p(s.Not())
	})
}
